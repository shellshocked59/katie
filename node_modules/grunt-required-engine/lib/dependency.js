var patternMin = new RegExp('([>= ]+)([0-9.]+)');
var patternMinAndMax = new RegExp('([>= ]+)([0-9.]+)([ <]+)([0-9.]+)');

function hasMinAndMaxEngine(engine) {
    return patternMinAndMax.test(engine);
}

function hasMinEngine(engine) {
    return patternMin.test(engine);
}

function getMinAndMaxEngine(engine) {
    var matches;
    
    matches = patternMinAndMax.exec(engine);
    
    return {
        min: {
            sign: (matches[1] || '').trim(),
            value: (matches[2] || '').trim()
        },
        max: {
            sign: (matches[3] || '').trim(),
            value: (matches[4] || '').trim()
        } 
    };
}

function getMinEngine(engine) {
    var matches;
    
    matches = patternMin.exec(engine);
    
    return {
        sign: (matches[1] || '').trim(),
        value: (matches[2] || '').trim()
    };
}

function formatEngine(engine) {
    var nParts;
    if(engine) {
        nParts = engine.split('.').length;
    
        // Chnage y.x to 0.y.x
        return nParts === 2 ? ['0', engine].join('.') : engine;
    }
    return engine;
}

function Dependency(name, engine) {
    var minAndMaxEngine;
    
    if(name === undefined) {
        throw new Error('Name is a required parameter');
    }
    
    this._name = name || '';
    this._engine = engine || '';
    this._minEngine = {};
    this._maxEngine = {};
    
    if(hasMinAndMaxEngine(this._engine)) {
        minAndMaxEngine = getMinAndMaxEngine(this._engine);
        this._minEngine = minAndMaxEngine.min;
        this._maxEngine = minAndMaxEngine.max
        
    } else if(hasMinEngine(this._engine)){
        this._minEngine = getMinEngine(this._engine);
    }
    
    this._minEngine.value = formatEngine(this._minEngine.value);
    this._maxEngine.value = formatEngine(this._maxEngine.value);
}

Dependency.prototype.getName = function() { 
    return this._name;
};

Dependency.prototype.hasMinEngine = function() {
    return !!this._minEngine && !!this._minEngine.value ;
}

Dependency.prototype.hasMaxEngine = function() {
    return !!this._maxEngine && !!this._maxEngine.value;
}

Dependency.prototype.getMinEngine = function() {
    return this._minEngine;
}

Dependency.prototype.getMaxEngine = function() {
    return this._maxEngine;
}

module.exports = Dependency;