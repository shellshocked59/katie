describe('Dependency', function(){
    var expect = require("chai").expect;
    var Dependency = require('../lib/dependency');
    
    describe('#constructor', function() {
        it('should throw an exception when call constructor without a name', function() {
            expect(function (){
                new Dependency();
            }).to.throw('Name is a required parameter');
        });
        
        it('should create the object and provide a min version', function() {
            var module = new Dependency('modulexx', '>=0.12.3');
            
            expect(module.getName()).to.be.equal('modulexx');
            expect(module.hasMinEngine()).to.be.true;
            expect(module.hasMaxEngine()).to.be.false;
            expect(module.getMinEngine().value).to.be.equal('0.12.3');
            expect(module.getMinEngine().sign).to.be.equal('>=');
        });
        
        it('should create the object and provide a min and max version', function() {
            var module = new Dependency('modulexx', '>=0.12.3 <0.12.8');
            
            expect(module.getName()).to.be.equal('modulexx');
            expect(module.hasMinEngine()).to.be.true;
            expect(module.hasMaxEngine()).to.be.true;
            expect(module.getMinEngine().value).to.be.equal('0.12.3');
            expect(module.getMinEngine().sign).to.be.equal('>=');
            expect(module.getMaxEngine().value).to.be.equal('0.12.8');
            expect(module.getMaxEngine().sign).to.be.equal('<');
        });
        
        it('should format an engine as x.x to x.x.y', function() {
            var module = new Dependency('modulexx', '>=12.3');
            
            expect(module.getName()).to.be.equal('modulexx');
            expect(module.hasMinEngine()).to.be.true;
            expect(module.hasMaxEngine()).to.be.false;
            expect(module.getMinEngine().value).to.be.equal('0.12.3');
            expect(module.getMinEngine().sign).to.be.equal('>=');
        });
        
    });
    
});